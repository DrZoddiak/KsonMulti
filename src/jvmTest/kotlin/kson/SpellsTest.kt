package kson

import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.runTest
import kson.models.Spells
import kotlin.test.Test

@OptIn(ExperimentalCoroutinesApi::class)
class SpellsTest {
    @Test
    fun spellsGenerate() = runTest {
        val query = api.query<Spells>("")
        val result = query.results.indexes()
        println(result)
    }

    private val list = listOf(
        "acid-arrow",
        "acid-splash",
        "aid",
        "alarm",
        "alter-self",
        "animal-friendship",
        "animal-messenger",
        "animal-shapes",
        "animate-dead",
        "animate-objects",
        "antilife-shell",
        "antimagic-field",
        "antipathy-sympathy",
        "arcane-eye",
        "arcane-hand",
        "arcane-lock",
        "arcane-sword",
        "arcanists-magic-aura",
        "astral-projection",
        "augury",
        "awaken",
        "bane",
        "banishment",
        "barkskin",
        "beacon-of-hope",
        "bestow-curse",
        "black-tentacles",
        "blade-barrier",
        "bless",
        "blight",
        "blindness-deafness",
        "blink",
        "blur",
        "branding-smite",
        "burning-hands",
        "call-lightning",
        "calm-emotions",
        "chain-lightning",
        "charm-person",
        "chill-touch",
        "circle-of-death",
        "clairvoyance",
        "clone",
        "cloudkill",
        "color-spray",
        "command",
        "commune",
        "commune-with-nature",
        "comprehend-languages",
        "compulsion",
        "cone-of-cold",
        "confusion",
        "conjure-animals",
        "conjure-celestial",
        "conjure-elemental",
        "conjure-fey",
        "conjure-minor-elementals",
        "conjure-woodland-beings",
        "contact-other-plane",
        "contagion",
        "contingency",
        "continual-flame",
        "control-water",
        "control-weather",
        "counterspell",
        "create-food-and-water",
        "create-or-destroy-water",
        "create-undead",
        "creation",
        "cure-wounds",
        "dancing-lights",
        "darkness",
        "darkvision",
        "daylight",
        "death-ward",
        "delayed-blast-fireball",
        "demiplane",
        "detect-evil-and-good",
        "detect-magic",
        "detect-poison-and-disease",
        "detect-thoughts",
        "dimension-door",
        "disguise-self",
        "disintegrate",
        "dispel-evil-and-good",
        "dispel-magic",
        "divination",
        "divine-favor",
        "divine-word",
        "dominate-beast",
        "dominate-monster",
        "dominate-person",
        "dream",
        "druidcraft",
        "earthquake",
        "eldritch-blast",
        "enhance-ability",
        "enlarge-reduce",
        "entangle",
        "enthrall",
        "etherealness",
        "expeditious-retreat",
        "eyebite",
        "fabricate",
        "faerie-fire",
        "faithful-hound",
        "false-life",
        "fear",
        "feather-fall",
        "feeblemind",
        "find-familiar",
        "find-steed",
        "find-the-path",
        "find-traps",
        "finger-of-death",
        "fire-bolt",
        "fire-shield",
        "fire-storm",
        "fireball",
        "flame-blade",
        "flame-strike",
        "flaming-sphere",
        "flesh-to-stone",
        "floating-disk",
        "fly",
        "fog-cloud",
        "forbiddance",
        "forcecage",
        "foresight",
        "freedom-of-movement",
        "freezing-sphere",
        "gaseous-form",
        "gate",
        "geas",
        "gentle-repose",
        "giant-insect",
        "glibness",
        "globe-of-invulnerability",
        "glyph-of-warding",
        "goodberry",
        "grease",
        "greater-invisibility",
        "greater-restoration",
        "guardian-of-faith",
        "guards-and-wards",
        "guidance",
        "guiding-bolt",
        "gust-of-wind",
        "hallow",
        "hallucinatory-terrain",
        "harm",
        "haste",
        "heal",
        "healing-word",
        "heat-metal",
        "hellish-rebuke",
        "heroes-feast",
        "heroism",
        "hideous-laughter",
        "hold-monster",
        "hold-person",
        "holy-aura",
        "hunters-mark",
        "hypnotic-pattern",
        "ice-storm",
        "identify",
        "illusory-script",
        "imprisonment",
        "incendiary-cloud",
        "inflict-wounds",
        "insect-plague",
        "instant-summons",
        "invisibility",
        "irresistible-dance",
        "jump",
        "knock",
        "legend-lore",
        "lesser-restoration",
        "levitate",
        "light",
        "lightning-bolt",
        "locate-animals-or-plants",
        "locate-creature",
        "locate-object",
        "longstrider",
        "mage-armor",
        "mage-hand",
        "magic-circle",
        "magic-jar",
        "magic-missile",
        "magic-mouth",
        "magic-weapon",
        "magnificent-mansion",
        "major-image",
        "mass-cure-wounds",
        "mass-heal",
        "mass-healing-word",
        "mass-suggestion",
        "maze",
        "meld-into-stone",
        "mending",
        "message",
        "meteor-swarm",
        "mind-blank",
        "minor-illusion",
        "mirage-arcane",
        "mirror-image",
        "mislead",
        "misty-step",
        "modify-memory",
        "moonbeam",
        "move-earth",
        "nondetection",
        "pass-without-trace",
        "passwall",
        "phantasmal-killer",
        "phantom-steed",
        "planar-ally",
        "planar-binding",
        "plane-shift",
        "plant-growth",
        "poison-spray",
        "polymorph",
        "power-word-kill",
        "power-word-stun",
        "prayer-of-healing",
        "prestidigitation",
        "prismatic-spray",
        "prismatic-wall",
        "private-sanctum",
        "produce-flame",
        "programmed-illusion",
        "project-image",
        "protection-from-energy",
        "protection-from-evil-and-good",
        "protection-from-poison",
        "purify-food-and-drink",
        "raise-dead",
        "ray-of-enfeeblement",
        "ray-of-frost",
        "regenerate",
        "reincarnate",
        "remove-curse",
        "resilient-sphere",
        "resistance",
        "resurrection",
        "reverse-gravity",
        "revivify",
        "rope-trick",
        "sacred-flame",
        "sanctuary",
        "scorching-ray",
        "scrying",
        "secret-chest",
        "see-invisibility",
        "seeming",
        "sending",
        "sequester",
        "shapechange",
        "shatter",
        "shield",
        "shield-of-faith",
        "shillelagh",
        "shocking-grasp",
        "silence",
        "silent-image",
        "simulacrum",
        "sleep",
        "sleet-storm",
        "slow",
        "spare-the-dying",
        "speak-with-animals",
        "speak-with-dead",
        "speak-with-plants",
        "spider-climb",
        "spike-growth",
        "spirit-guardians",
        "spiritual-weapon",
        "stinking-cloud",
        "stone-shape",
        "stoneskin",
        "storm-of-vengeance",
        "suggestion",
        "sunbeam",
        "sunburst",
        "symbol",
        "telekinesis",
        "telepathic-bond",
        "teleport",
        "teleportation-circle",
        "thaumaturgy",
        "thunderwave",
        "time-stop",
        "tiny-hut",
        "tongues",
        "transport-via-plants",
        "tree-stride",
        "true-polymorph",
        "true-resurrection",
        "true-seeing",
        "true-strike",
        "unseen-servant",
        "vampiric-touch",
        "vicious-mockery",
        "wall-of-fire",
        "wall-of-force",
        "wall-of-ice",
        "wall-of-stone",
        "wall-of-thorns",
        "warding-bond",
        "water-breathing",
        "water-walk",
        "web",
        "weird",
        "wind-walk",
        "wind-wall",
        "wish",
        "word-of-recall",
        "zone-of-truth"

    )

    @Test
    fun spellsRoute() = runTest {
        for (search in list) {
            val result = api.fetch<Spells>(search)
            println(result)
        }
    }

}